CREATE OR REPLACE PROCEDURE update_record(
    p_record_type VARCHAR,  -- 'teacher', 'student', or 'course'
    p_id INT,
    p_param1 TEXT DEFAULT NULL,  -- Full Name / Course Name
    p_param2 TEXT DEFAULT NULL,  -- Gender / Course Code
    p_param3 TEXT DEFAULT NULL,  -- Email / Credits
    p_param4 TEXT DEFAULT NULL,  -- Phone Number / Department ID
    p_param5 INT DEFAULT NULL    -- Course ID / (unused for course)
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_old RECORD;
    v_course_name VARCHAR;
    v_old_course_name VARCHAR;
    v_department_id INT;
    v_building_id INT;
    v_change_msg TEXT := '';
BEGIN
    -- =============================================
    -- UPDATE TEACHER
    -- =============================================
    IF p_record_type = 'teacher' THEN
        -- 1️⃣ Check if teacher exists
        SELECT * INTO v_old FROM teachers WHERE teacher_id = p_id;
        IF NOT FOUND THEN
            RAISE NOTICE 'Teacher with ID % not found. Update canceled.', p_id;
            RETURN;
        END IF;
        -- 2️⃣ Check duplicate email (ignore same teacher)
        IF EXISTS (
            SELECT 1 FROM teachers
            WHERE email = p_param3
            AND teacher_id <> p_id
        ) THEN
            RAISE NOTICE 'Email % already exists for another teacher. Update canceled.', p_param3;
            RETURN;
        END IF;
        -- 3️⃣ Get new course info
        SELECT course_name, department_id
        INTO v_course_name, v_department_id
        FROM courses
        WHERE course_id = p_param5;
        IF v_course_name IS NULL THEN
            RAISE NOTICE 'Course ID % not found. Update canceled.', p_param5;
            RETURN;
        END IF;
        -- 4️⃣ Get old course name for comparison
        SELECT course_name INTO v_old_course_name
        FROM courses WHERE course_id = v_old.course_id;
        -- 5️⃣ Get building_id automatically from department
        SELECT department_building_id
        INTO v_building_id
        FROM department
        WHERE department_id = v_department_id;
        IF v_building_id IS NULL THEN
            RAISE NOTICE 'No building found for Department ID %. Update canceled.', v_department_id;
            RETURN;
        END IF;
        -- 6️⃣ Build change message dynamically
        IF p_param1 IS DISTINCT FROM v_old.full_name THEN
            v_change_msg := v_change_msg || E'\n- Full Name updated from "' || v_old.full_name || '" to "' || p_param1 || '"';
        END IF;
        IF p_param2 IS DISTINCT FROM v_old.gender THEN
            v_change_msg := v_change_msg || E'\n- Gender updated from "' || v_old.gender || '" to "' || p_param2 || '"';
        END IF;
        IF p_param3 IS DISTINCT FROM v_old.email THEN
            v_change_msg := v_change_msg || E'\n- Email updated from "' || v_old.email || '" to "' || p_param3 || '"';
        END IF;
        IF p_param4 IS DISTINCT FROM v_old.phone_number THEN
            v_change_msg := v_change_msg || E'\n- Phone Number updated from "' || v_old.phone_number || '" to "' || p_param4 || '"';
        END IF;
        IF p_param5 IS DISTINCT FROM v_old.course_id THEN
            v_change_msg := v_change_msg || E'\n- Course updated from "' || v_old_course_name || '" to "' || v_course_name || '"';
        END IF;
        -- 7️⃣ If no changes
        IF v_change_msg = '' THEN
            RAISE NOTICE 'No changes detected for Teacher ID %.', p_id;
            RETURN;
        END IF;
        -- 8️⃣ Perform update
        UPDATE teachers
        SET
            full_name = p_param1,
            gender = p_param2,
            email = p_param3,
            phone_number = p_param4,
            course_id = p_param5,
            department_id = v_department_id,
            building_id = v_building_id
        WHERE teacher_id = p_id;
        -- 9️⃣ Show what changed
        RAISE NOTICE 'Teacher ID % updated successfully with the following changes:%', p_id, v_change_msg;

    -- =============================================
    -- UPDATE STUDENT
    -- =============================================
    ELSIF p_record_type = 'student' THEN
        -- 1️⃣ Check if student exists
        SELECT * INTO v_old FROM students WHERE student_id = p_id;
        IF NOT FOUND THEN
            RAISE NOTICE 'Student with ID % not found. Update canceled.', p_id;
            RETURN;
        END IF;
        -- 2️⃣ Check duplicate email (ignore same student)
        IF EXISTS (
            SELECT 1 FROM students
            WHERE email = p_param3
            AND student_id <> p_id
        ) THEN
            RAISE NOTICE 'Email % already exists for another student. Update canceled.', p_param3;
            RETURN;
        END IF;
        -- 3️⃣ Get new course info
        SELECT course_name, department_id
        INTO v_course_name, v_department_id
        FROM courses
        WHERE course_id = p_param5;
        IF v_course_name IS NULL THEN
            RAISE NOTICE 'Course ID % not found. Update canceled.', p_param5;
            RETURN;
        END IF;
        -- 4️⃣ Get old course name for comparison
        SELECT course_name INTO v_old_course_name
        FROM courses WHERE course_id = v_old.course_id;
        -- 5️⃣ Build change message dynamically
        IF p_param1 IS DISTINCT FROM v_old.full_name THEN
            v_change_msg := v_change_msg || E'\n- Full Name updated from "' || v_old.full_name || '" to "' || p_param1 || '"';
        END IF;
        IF p_param2 IS DISTINCT FROM v_old.gender THEN
            v_change_msg := v_change_msg || E'\n- Gender updated from "' || v_old.gender || '" to "' || p_param2 || '"';
        END IF;
        IF p_param4 IS DISTINCT FROM v_old.birth_date::TEXT THEN
            v_change_msg := v_change_msg || E'\n- Birth Date updated from "' || v_old.birth_date || '" to "' || p_param4 || '"';
        END IF;
        IF p_param3 IS DISTINCT FROM v_old.email THEN
            v_change_msg := v_change_msg || E'\n- Email updated from "' || v_old.email || '" to "' || p_param3 || '"';
        END IF;
        IF p_param4 IS DISTINCT FROM v_old.phone_number THEN
            v_change_msg := v_change_msg || E'\n- Phone Number updated from "' || v_old.phone_number || '" to "' || p_param4 || '"';
        END IF;
        IF p_param5 IS DISTINCT FROM v_old.course_id THEN
            v_change_msg := v_change_msg || E'\n- Course updated from "' || v_old_course_name || '" to "' || v_course_name || '"';
        END IF;
        -- 6️⃣ If no changes detected
        IF v_change_msg = '' THEN
            RAISE NOTICE 'No changes detected for Student ID %.', p_id;
            RETURN;
        END IF;
        -- 7️⃣ Perform update
        UPDATE students
        SET
            full_name = p_param1,
            gender = p_param2,
            birth_date = p_param4::DATE,
            email = p_param3,
            phone_number = p_param4,
            course_id = p_param5,
            department_id = v_department_id
        WHERE student_id = p_id;
        -- 8️⃣ Show what changed
        RAISE NOTICE 'Student ID % updated successfully with the following changes:%', p_id, v_change_msg;

    -- =============================================
    -- UPDATE COURSE
    -- =============================================
    ELSIF p_record_type = 'course' THEN
        -- 1️⃣ Check if course exists
        SELECT * INTO v_old FROM courses WHERE course_id = p_id;
        IF NOT FOUND THEN
            RAISE NOTICE 'Course with ID % not found. Update canceled.', p_id;
            RETURN;
        END IF;
        -- 2️⃣ Check for duplicate course name (ignore same course)
        IF EXISTS (
            SELECT 1 FROM courses
            WHERE LOWER(course_name) = LOWER(p_param1)
            AND course_id <> p_id
        ) THEN
            RAISE NOTICE 'Course name "%" already exists for another course. Update canceled.', p_param1;
            RETURN;
        END IF;
        -- 3️⃣ Check for duplicate course code (ignore same course)
        IF EXISTS (
            SELECT 1 FROM courses
            WHERE LOWER(course_code) = LOWER(p_param2)
            AND course_id <> p_id
        ) THEN
            RAISE NOTICE 'Course code "%" already exists for another course. Update canceled.', p_param2;
            RETURN;
        END IF;
        -- 4️⃣ Build change message dynamically
        IF p_param1 IS DISTINCT FROM v_old.course_name THEN
            v_change_msg := v_change_msg || E'\n- Course Name updated from "' || v_old.course_name || '" to "' || p_param1 || '"';
        END IF;
        IF p_param2 IS DISTINCT FROM v_old.course_code THEN
            v_change_msg := v_change_msg || E'\n- Course Code updated from "' || v_old.course_code || '" to "' || p_param2 || '"';
        END IF;
        IF p_param3::INT IS DISTINCT FROM v_old.credits THEN
            v_change_msg := v_change_msg || E'\n- Credits updated from "' || v_old.credits || '" to "' || p_param3 || '"';
        END IF;
        IF p_param4::INT IS DISTINCT FROM v_old.department_id THEN
            v_change_msg := v_change_msg || E'\n- Department updated from "' || v_old.department_id || '" to "' || p_param4 || '"';
        END IF;
        -- 5️⃣ If no changes
        IF v_change_msg = '' THEN
            RAISE NOTICE 'No changes detected for Course ID %.', p_id;
            RETURN;
        END IF;
        -- 6️⃣ Perform update
        UPDATE courses
        SET
            course_name = p_param1,
            course_code = p_param2,
            credits = p_param3::INT,
            department_id = p_param4::INT
        WHERE course_id = p_id;
        -- 7️⃣ Show what changed
        RAISE NOTICE 'Course ID % updated successfully with the following changes:%', p_id, v_change_msg;

    ELSE
        RAISE NOTICE 'Invalid record type: %. Use "teacher", "student", or "course".', p_record_type;
    END IF;
END;
$$;


CALL update_record(
    'teacher',
    43,
    'Prof. Carlo Dela Cruz',                -- Full Name
    'M',                           -- Gender
    'carlo.delacruz@example.com',       -- Email
    '09191231234',                 -- Phone Number
    101                            -- Course ID
);
SELECT * FROM teachers



CALL update_record(
    'student',
    53,
    'Juan Dela Cruz',              -- Full Name
    'M',                           -- Gender
    'sella.cruz@example.com',     -- Email
    '2001-06-15',                 -- Birth Date (as text)
    103                            -- Course ID
);
SELECT * FROM students



CALL update_record(
    'course',
    101,
    'BS Computer Science',        -- Course Name
    'CS101',                       -- Course Code
    '6',                           -- Credits (as text)
    '31'                           -- Department ID (as text)
);
SELECT * FROM courses
